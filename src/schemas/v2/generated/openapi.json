{
  "openapi": "3.1.0",
  "info": {
    "title": "Patreon API",
    "version": "2",
    "description": "An unofficial OpenAPI schema for the V2 Patreon API. Made based on the official api with https://github.com/ghostrider-05/patreon-api.ts",
    "termsOfService": "https://patreon.com/legal",
    "contact": {
      "name": "Patreon",
      "url": "https://www.patreondevelopers.com/"
    }
  },
  "externalDocs": {
    "description": "Official Patreon documentation",
    "url": "https://docs.patreon.com"
  },
  "servers": [
    {
      "description": "API domain",
      "url": "https://patreon.com"
    }
  ],
  "tags": [
    {
      "name": "Resources",
      "externalDocs": {
        "description": "Resource endpoints documentation",
        "url": "https://docs.patreon.com/#apiv2-resource-endpoints"
      }
    },
    {
      "name": "Webhooks",
      "externalDocs": {
        "description": "Webhook endpoints documentation",
        "url": "https://docs.patreon.com/#apiv2-webhook-endpoints"
      }
    }
  ],
  "components": {
    "headers": {
      "x-patreon-uuid": {
        "schema": {
          "type": "string"
        }
      },
      "x-patreon-sha": {
        "schema": {
          "type": "string"
        }
      },
      "cf-cache-status": {
        "schema": {
          "type": "string"
        }
      },
      "cf-ray": {
        "schema": {
          "type": "string"
        }
      },
      "X-Patreon-Event": {
        "schema": {
          "type": "string"
        }
      },
      "X-Patreon-Signature": {
        "schema": {
          "type": "string"
        }
      }
    },
    "parameters": {
      "id": {
        "name": "id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "campaign_id": {
        "name": "campaign_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "userAgent": {
        "name": "User-Agent",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string",
          "default": "PatreonBot patreon-api.ts (https://github.com/ghostrider-05/patreon-api.ts, 0.8.0)"
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request: Something was wrong with your request (syntax, size too large, etc.)",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/APIError"
              }
            }
          }
        },
        "headers": {
          "x-patreon-sha": {
            "$ref": "#/components/headers/x-patreon-sha"
          },
          "x-patreon-uuid": {
            "$ref": "#/components/headers/x-patreon-uuid"
          },
          "cf-cache-status": {
            "$ref": "#/components/headers/cf-cache-status"
          },
          "cf-ray": {
            "$ref": "#/components/headers/cf-ray"
          }
        }
      },
      "401": {
        "description": "Unauthorized: Authentication failed (bad API key, invalid OAuth token, incorrect scopes, etc.)",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/APIError"
              }
            }
          }
        },
        "headers": {
          "x-patreon-sha": {
            "$ref": "#/components/headers/x-patreon-sha"
          },
          "x-patreon-uuid": {
            "$ref": "#/components/headers/x-patreon-uuid"
          },
          "cf-cache-status": {
            "$ref": "#/components/headers/cf-cache-status"
          },
          "cf-ray": {
            "$ref": "#/components/headers/cf-ray"
          }
        }
      },
      "403": {
        "description": "Forbidden: The requested is hidden for administrators only.",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/APIError"
              }
            }
          }
        },
        "headers": {
          "x-patreon-sha": {
            "$ref": "#/components/headers/x-patreon-sha"
          },
          "x-patreon-uuid": {
            "$ref": "#/components/headers/x-patreon-uuid"
          },
          "cf-cache-status": {
            "$ref": "#/components/headers/cf-cache-status"
          },
          "cf-ray": {
            "$ref": "#/components/headers/cf-ray"
          }
        }
      },
      "404": {
        "description": "Not Found: The specified resource could not be found.",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/APIError"
              }
            }
          }
        },
        "headers": {
          "x-patreon-sha": {
            "$ref": "#/components/headers/x-patreon-sha"
          },
          "x-patreon-uuid": {
            "$ref": "#/components/headers/x-patreon-uuid"
          },
          "cf-cache-status": {
            "$ref": "#/components/headers/cf-cache-status"
          },
          "cf-ray": {
            "$ref": "#/components/headers/cf-ray"
          }
        }
      },
      "405": {
        "description": "Method Not Allowed: You tried to access a resource with an invalid method.",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/APIError"
              }
            }
          }
        },
        "headers": {
          "x-patreon-sha": {
            "$ref": "#/components/headers/x-patreon-sha"
          },
          "x-patreon-uuid": {
            "$ref": "#/components/headers/x-patreon-uuid"
          },
          "cf-cache-status": {
            "$ref": "#/components/headers/cf-cache-status"
          },
          "cf-ray": {
            "$ref": "#/components/headers/cf-ray"
          }
        }
      },
      "406": {
        "description": "Not Acceptable: You requested a format that isn't json.",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/APIError"
              }
            }
          }
        },
        "headers": {
          "x-patreon-sha": {
            "$ref": "#/components/headers/x-patreon-sha"
          },
          "x-patreon-uuid": {
            "$ref": "#/components/headers/x-patreon-uuid"
          },
          "cf-cache-status": {
            "$ref": "#/components/headers/cf-cache-status"
          },
          "cf-ray": {
            "$ref": "#/components/headers/cf-ray"
          }
        }
      },
      "410": {
        "description": "Gone: The resource requested has been removed from our servers.",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/APIError"
              }
            }
          }
        },
        "headers": {
          "x-patreon-sha": {
            "$ref": "#/components/headers/x-patreon-sha"
          },
          "x-patreon-uuid": {
            "$ref": "#/components/headers/x-patreon-uuid"
          },
          "cf-cache-status": {
            "$ref": "#/components/headers/cf-cache-status"
          },
          "cf-ray": {
            "$ref": "#/components/headers/cf-ray"
          }
        }
      },
      "429": {
        "description": "Too Many Requests: Slow down!",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/APIError"
              }
            }
          }
        },
        "headers": {
          "x-patreon-sha": {
            "$ref": "#/components/headers/x-patreon-sha"
          },
          "x-patreon-uuid": {
            "$ref": "#/components/headers/x-patreon-uuid"
          },
          "cf-cache-status": {
            "$ref": "#/components/headers/cf-cache-status"
          },
          "cf-ray": {
            "$ref": "#/components/headers/cf-ray"
          }
        }
      },
      "500": {
        "description": "Internal Server Error: Our server ran into a problem while processing this request. Please try again later.",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/APIError"
              }
            }
          }
        },
        "headers": {
          "x-patreon-sha": {
            "$ref": "#/components/headers/x-patreon-sha"
          },
          "x-patreon-uuid": {
            "$ref": "#/components/headers/x-patreon-uuid"
          },
          "cf-cache-status": {
            "$ref": "#/components/headers/cf-cache-status"
          },
          "cf-ray": {
            "$ref": "#/components/headers/cf-ray"
          }
        }
      },
      "503": {
        "description": "Service Unavailable: We're temporarily offline for maintenance. Please try again later.",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/APIError"
              }
            }
          }
        },
        "headers": {
          "x-patreon-sha": {
            "$ref": "#/components/headers/x-patreon-sha"
          },
          "x-patreon-uuid": {
            "$ref": "#/components/headers/x-patreon-uuid"
          },
          "cf-cache-status": {
            "$ref": "#/components/headers/cf-cache-status"
          },
          "cf-ray": {
            "$ref": "#/components/headers/cf-ray"
          }
        }
      },
      "userResponse": {
        "description": "OK: Completed your request succesfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "data",
                "meta"
              ],
              "properties": {
                "data": {
                  "required": [
                    "id",
                    "type"
                  ],
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "user"
                      ]
                    },
                    "attributes": {
                      "$ref": "#/components/schemas/user"
                    },
                    "relationships": {
                      "properties": {
                        "campaign": {
                          "required": [
                            "data"
                          ],
                          "properties": {
                            "data": {
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "campaign"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type"
                              ]
                            },
                            "links": {
                              "properties": {
                                "related": {
                                  "type": "string",
                                  "format": "uri"
                                }
                              }
                            }
                          }
                        },
                        "memberships": {
                          "required": [
                            "data"
                          ],
                          "properties": {
                            "data": {
                              "type": "array",
                              "items": {
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "member"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "included": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "campaign"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/campaign"
                          }
                        }
                      },
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "member"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/member"
                          }
                        }
                      }
                    ]
                  }
                },
                "links": {
                  "properties": {
                    "self": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "headers": {
          "x-patreon-sha": {
            "$ref": "#/components/headers/x-patreon-sha"
          },
          "x-patreon-uuid": {
            "$ref": "#/components/headers/x-patreon-uuid"
          },
          "cf-cache-status": {
            "$ref": "#/components/headers/cf-cache-status"
          },
          "cf-ray": {
            "$ref": "#/components/headers/cf-ray"
          }
        }
      },
      "campaignResponse": {
        "description": "OK: Completed your request succesfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "data",
                "meta"
              ],
              "properties": {
                "data": {
                  "required": [
                    "id",
                    "type"
                  ],
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "campaign"
                      ]
                    },
                    "attributes": {
                      "$ref": "#/components/schemas/campaign"
                    },
                    "relationships": {
                      "properties": {
                        "benefits": {
                          "required": [
                            "data"
                          ],
                          "properties": {
                            "data": {
                              "type": "array",
                              "items": {
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "benefit"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ]
                              }
                            }
                          }
                        },
                        "creator": {
                          "required": [
                            "data"
                          ],
                          "properties": {
                            "data": {
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "user"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type"
                              ]
                            },
                            "links": {
                              "properties": {
                                "related": {
                                  "type": "string",
                                  "format": "uri"
                                }
                              }
                            }
                          }
                        },
                        "goals": {
                          "required": [
                            "data"
                          ],
                          "properties": {
                            "data": {
                              "type": "array",
                              "items": {
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "goal"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ]
                              }
                            }
                          }
                        },
                        "tiers": {
                          "required": [
                            "data"
                          ],
                          "properties": {
                            "data": {
                              "type": "array",
                              "items": {
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "tier"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "included": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "benefit"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/benefit"
                          }
                        }
                      },
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "user"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/user"
                          }
                        }
                      },
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "goal"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/goal"
                          }
                        }
                      },
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "tier"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/tier"
                          }
                        }
                      }
                    ]
                  }
                },
                "links": {
                  "properties": {
                    "self": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "headers": {
          "x-patreon-sha": {
            "$ref": "#/components/headers/x-patreon-sha"
          },
          "x-patreon-uuid": {
            "$ref": "#/components/headers/x-patreon-uuid"
          },
          "cf-cache-status": {
            "$ref": "#/components/headers/cf-cache-status"
          },
          "cf-ray": {
            "$ref": "#/components/headers/cf-ray"
          }
        }
      },
      "campaignsResponse": {
        "description": "OK: Completed your request succesfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "data",
                "links"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "required": [
                      "id",
                      "type"
                    ],
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "campaign"
                        ]
                      },
                      "attributes": {
                        "$ref": "#/components/schemas/campaign"
                      },
                      "relationships": {
                        "properties": {
                          "benefits": {
                            "required": [
                              "data"
                            ],
                            "properties": {
                              "data": {
                                "type": "array",
                                "items": {
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "benefit"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ]
                                }
                              }
                            }
                          },
                          "creator": {
                            "required": [
                              "data"
                            ],
                            "properties": {
                              "data": {
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "user"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ]
                              },
                              "links": {
                                "properties": {
                                  "related": {
                                    "type": "string",
                                    "format": "uri"
                                  }
                                }
                              }
                            }
                          },
                          "goals": {
                            "required": [
                              "data"
                            ],
                            "properties": {
                              "data": {
                                "type": "array",
                                "items": {
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "goal"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ]
                                }
                              }
                            }
                          },
                          "tiers": {
                            "required": [
                              "data"
                            ],
                            "properties": {
                              "data": {
                                "type": "array",
                                "items": {
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "tier"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "included": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "benefit"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/benefit"
                          }
                        }
                      },
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "user"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/user"
                          }
                        }
                      },
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "goal"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/goal"
                          }
                        }
                      },
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "tier"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/tier"
                          }
                        }
                      }
                    ]
                  }
                },
                "meta": {
                  "properties": {
                    "total": {
                      "type": "number"
                    },
                    "pagination": {
                      "properties": {
                        "cursors": {
                          "properties": {
                            "next": {
                              "type": [
                                "string",
                                "null"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "headers": {
          "x-patreon-sha": {
            "$ref": "#/components/headers/x-patreon-sha"
          },
          "x-patreon-uuid": {
            "$ref": "#/components/headers/x-patreon-uuid"
          },
          "cf-cache-status": {
            "$ref": "#/components/headers/cf-cache-status"
          },
          "cf-ray": {
            "$ref": "#/components/headers/cf-ray"
          }
        }
      },
      "membersResponse": {
        "description": "OK: Completed your request succesfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "data",
                "links"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "required": [
                      "id",
                      "type"
                    ],
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "member"
                        ]
                      },
                      "attributes": {
                        "$ref": "#/components/schemas/member"
                      },
                      "relationships": {
                        "properties": {
                          "address": {
                            "required": [
                              "data"
                            ],
                            "properties": {
                              "data": {
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "address"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ]
                              },
                              "links": {
                                "properties": {
                                  "related": {
                                    "type": "string",
                                    "format": "uri"
                                  }
                                }
                              }
                            }
                          },
                          "campaign": {
                            "required": [
                              "data"
                            ],
                            "properties": {
                              "data": {
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "campaign"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ]
                              },
                              "links": {
                                "properties": {
                                  "related": {
                                    "type": "string",
                                    "format": "uri"
                                  }
                                }
                              }
                            }
                          },
                          "currently_entitled_tiers": {
                            "required": [
                              "data"
                            ],
                            "properties": {
                              "data": {
                                "type": "array",
                                "items": {
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "tier"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ]
                                }
                              }
                            }
                          },
                          "pledge_history": {
                            "required": [
                              "data"
                            ],
                            "properties": {
                              "data": {
                                "type": "array",
                                "items": {
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "pledge-event"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ]
                                }
                              }
                            }
                          },
                          "user": {
                            "required": [
                              "data"
                            ],
                            "properties": {
                              "data": {
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "user"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ]
                              },
                              "links": {
                                "properties": {
                                  "related": {
                                    "type": "string",
                                    "format": "uri"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "included": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "address"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/address"
                          }
                        }
                      },
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "campaign"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/campaign"
                          }
                        }
                      },
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "tier"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/tier"
                          }
                        }
                      },
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "pledge-event"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/pledge-event"
                          }
                        }
                      },
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "user"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/user"
                          }
                        }
                      }
                    ]
                  }
                },
                "meta": {
                  "properties": {
                    "total": {
                      "type": "number"
                    },
                    "pagination": {
                      "properties": {
                        "cursors": {
                          "properties": {
                            "next": {
                              "type": [
                                "string",
                                "null"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "headers": {
          "x-patreon-sha": {
            "$ref": "#/components/headers/x-patreon-sha"
          },
          "x-patreon-uuid": {
            "$ref": "#/components/headers/x-patreon-uuid"
          },
          "cf-cache-status": {
            "$ref": "#/components/headers/cf-cache-status"
          },
          "cf-ray": {
            "$ref": "#/components/headers/cf-ray"
          }
        }
      },
      "memberResponse": {
        "description": "OK: Completed your request succesfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "data",
                "meta"
              ],
              "properties": {
                "data": {
                  "required": [
                    "id",
                    "type"
                  ],
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "member"
                      ]
                    },
                    "attributes": {
                      "$ref": "#/components/schemas/member"
                    },
                    "relationships": {
                      "properties": {
                        "address": {
                          "required": [
                            "data"
                          ],
                          "properties": {
                            "data": {
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "address"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type"
                              ]
                            },
                            "links": {
                              "properties": {
                                "related": {
                                  "type": "string",
                                  "format": "uri"
                                }
                              }
                            }
                          }
                        },
                        "campaign": {
                          "required": [
                            "data"
                          ],
                          "properties": {
                            "data": {
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "campaign"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type"
                              ]
                            },
                            "links": {
                              "properties": {
                                "related": {
                                  "type": "string",
                                  "format": "uri"
                                }
                              }
                            }
                          }
                        },
                        "currently_entitled_tiers": {
                          "required": [
                            "data"
                          ],
                          "properties": {
                            "data": {
                              "type": "array",
                              "items": {
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "tier"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ]
                              }
                            }
                          }
                        },
                        "pledge_history": {
                          "required": [
                            "data"
                          ],
                          "properties": {
                            "data": {
                              "type": "array",
                              "items": {
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "pledge-event"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ]
                              }
                            }
                          }
                        },
                        "user": {
                          "required": [
                            "data"
                          ],
                          "properties": {
                            "data": {
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "user"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type"
                              ]
                            },
                            "links": {
                              "properties": {
                                "related": {
                                  "type": "string",
                                  "format": "uri"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "included": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "address"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/address"
                          }
                        }
                      },
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "campaign"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/campaign"
                          }
                        }
                      },
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "tier"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/tier"
                          }
                        }
                      },
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "pledge-event"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/pledge-event"
                          }
                        }
                      },
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "user"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/user"
                          }
                        }
                      }
                    ]
                  }
                },
                "links": {
                  "properties": {
                    "self": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "headers": {
          "x-patreon-sha": {
            "$ref": "#/components/headers/x-patreon-sha"
          },
          "x-patreon-uuid": {
            "$ref": "#/components/headers/x-patreon-uuid"
          },
          "cf-cache-status": {
            "$ref": "#/components/headers/cf-cache-status"
          },
          "cf-ray": {
            "$ref": "#/components/headers/cf-ray"
          }
        }
      },
      "postsResponse": {
        "description": "OK: Completed your request succesfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "data",
                "links"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "required": [
                      "id",
                      "type"
                    ],
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "post"
                        ]
                      },
                      "attributes": {
                        "$ref": "#/components/schemas/post"
                      },
                      "relationships": {
                        "properties": {
                          "user": {
                            "required": [
                              "data"
                            ],
                            "properties": {
                              "data": {
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "user"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ]
                              },
                              "links": {
                                "properties": {
                                  "related": {
                                    "type": "string",
                                    "format": "uri"
                                  }
                                }
                              }
                            }
                          },
                          "campaign": {
                            "required": [
                              "data"
                            ],
                            "properties": {
                              "data": {
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "campaign"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ]
                              },
                              "links": {
                                "properties": {
                                  "related": {
                                    "type": "string",
                                    "format": "uri"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "included": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "user"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/user"
                          }
                        }
                      },
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "campaign"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/campaign"
                          }
                        }
                      }
                    ]
                  }
                },
                "meta": {
                  "properties": {
                    "total": {
                      "type": "number"
                    },
                    "pagination": {
                      "properties": {
                        "cursors": {
                          "properties": {
                            "next": {
                              "type": [
                                "string",
                                "null"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "headers": {
          "x-patreon-sha": {
            "$ref": "#/components/headers/x-patreon-sha"
          },
          "x-patreon-uuid": {
            "$ref": "#/components/headers/x-patreon-uuid"
          },
          "cf-cache-status": {
            "$ref": "#/components/headers/cf-cache-status"
          },
          "cf-ray": {
            "$ref": "#/components/headers/cf-ray"
          }
        }
      },
      "postResponse": {
        "description": "OK: Completed your request succesfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "data",
                "meta"
              ],
              "properties": {
                "data": {
                  "required": [
                    "id",
                    "type"
                  ],
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "post"
                      ]
                    },
                    "attributes": {
                      "$ref": "#/components/schemas/post"
                    },
                    "relationships": {
                      "properties": {
                        "user": {
                          "required": [
                            "data"
                          ],
                          "properties": {
                            "data": {
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "user"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type"
                              ]
                            },
                            "links": {
                              "properties": {
                                "related": {
                                  "type": "string",
                                  "format": "uri"
                                }
                              }
                            }
                          }
                        },
                        "campaign": {
                          "required": [
                            "data"
                          ],
                          "properties": {
                            "data": {
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "campaign"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type"
                              ]
                            },
                            "links": {
                              "properties": {
                                "related": {
                                  "type": "string",
                                  "format": "uri"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "included": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "user"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/user"
                          }
                        }
                      },
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "campaign"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/campaign"
                          }
                        }
                      }
                    ]
                  }
                },
                "links": {
                  "properties": {
                    "self": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "headers": {
          "x-patreon-sha": {
            "$ref": "#/components/headers/x-patreon-sha"
          },
          "x-patreon-uuid": {
            "$ref": "#/components/headers/x-patreon-uuid"
          },
          "cf-cache-status": {
            "$ref": "#/components/headers/cf-cache-status"
          },
          "cf-ray": {
            "$ref": "#/components/headers/cf-ray"
          }
        }
      },
      "webhookResponse": {
        "description": "OK: Completed your request succesfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "data",
                "meta"
              ],
              "properties": {
                "data": {
                  "required": [
                    "id",
                    "type"
                  ],
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "webhook"
                      ]
                    },
                    "attributes": {
                      "$ref": "#/components/schemas/webhook"
                    },
                    "relationships": {
                      "properties": {
                        "campaign": {
                          "required": [
                            "data"
                          ],
                          "properties": {
                            "data": {
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "campaign"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type"
                              ]
                            },
                            "links": {
                              "properties": {
                                "related": {
                                  "type": "string",
                                  "format": "uri"
                                }
                              }
                            }
                          }
                        },
                        "client": {
                          "required": [
                            "data"
                          ],
                          "properties": {
                            "data": {
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "client"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type"
                              ]
                            },
                            "links": {
                              "properties": {
                                "related": {
                                  "type": "string",
                                  "format": "uri"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "included": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "campaign"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/campaign"
                          }
                        }
                      },
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "client"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/client"
                          }
                        }
                      }
                    ]
                  }
                },
                "links": {
                  "properties": {
                    "self": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "headers": {
          "x-patreon-sha": {
            "$ref": "#/components/headers/x-patreon-sha"
          },
          "x-patreon-uuid": {
            "$ref": "#/components/headers/x-patreon-uuid"
          },
          "cf-cache-status": {
            "$ref": "#/components/headers/cf-cache-status"
          },
          "cf-ray": {
            "$ref": "#/components/headers/cf-ray"
          }
        }
      },
      "webhooksResponse": {
        "description": "OK: Completed your request succesfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "data",
                "links"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "required": [
                      "id",
                      "type"
                    ],
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "webhook"
                        ]
                      },
                      "attributes": {
                        "$ref": "#/components/schemas/webhook"
                      },
                      "relationships": {
                        "properties": {
                          "campaign": {
                            "required": [
                              "data"
                            ],
                            "properties": {
                              "data": {
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "campaign"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ]
                              },
                              "links": {
                                "properties": {
                                  "related": {
                                    "type": "string",
                                    "format": "uri"
                                  }
                                }
                              }
                            }
                          },
                          "client": {
                            "required": [
                              "data"
                            ],
                            "properties": {
                              "data": {
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "client"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ]
                              },
                              "links": {
                                "properties": {
                                  "related": {
                                    "type": "string",
                                    "format": "uri"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "included": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "campaign"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/campaign"
                          }
                        }
                      },
                      {
                        "required": [
                          "attributes",
                          "type",
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "client"
                            ]
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/client"
                          }
                        }
                      }
                    ]
                  }
                },
                "meta": {
                  "properties": {
                    "total": {
                      "type": "number"
                    },
                    "pagination": {
                      "properties": {
                        "cursors": {
                          "properties": {
                            "next": {
                              "type": [
                                "string",
                                "null"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "headers": {
          "x-patreon-sha": {
            "$ref": "#/components/headers/x-patreon-sha"
          },
          "x-patreon-uuid": {
            "$ref": "#/components/headers/x-patreon-uuid"
          },
          "cf-cache-status": {
            "$ref": "#/components/headers/cf-cache-status"
          },
          "cf-ray": {
            "$ref": "#/components/headers/cf-ray"
          }
        }
      }
    },
    "securitySchemes": {
      "auth": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "tokenUrl": "https://patreon.com/api/oauth2/token",
            "authorizationUrl": "https://patreon.com/oauth2/authorize",
            "scopes": {
              "identity": "Provides read access to data about the user.\nSee the /identity endpoint documentation for details about what data is available.",
              "identity[email]": "Provides read access to the user’s email.",
              "identity.memberships": "Provides read access to the user’s memberships.",
              "campaigns": "Provides read access to basic campaign data.\nSee the /campaign endpoint documentation for details about what data is available.",
              "campaigns.members": "Provides read access to data about a campaign’s members.\nSee the /members endpoint documentation for details about what data is available.\nAlso allows the same information to be sent via webhooks created by your client.",
              "campaigns.members[email]": "Provides read access to the member’s email.\nAlso allows the same information to be sent via webhooks created by your client.",
              "campaigns.members.address": "Provides read access to the member’s address, if an address was collected in the pledge flow.\nAlso allows the same information to be sent via webhooks created by your client.",
              "campaigns.posts": "Provides read access to the posts on a campaign.",
              "w:campaigns.webhook": "Provides read, write, update, and delete access to the campaign’s webhooks created by the client."
            }
          }
        }
      }
    },
    "schemas": {
      "address": {
        "type": "object",
        "title": "Address",
        "description": "A patron's shipping address.",
        "externalDocs": {
          "description": "Official documentation for the Address resource",
          "url": "https://docs.patreon.com/#address"
        },
        "properties": {
          "addressee": {
            "type": [
              "string",
              "null"
            ],
            "description": "Full recipient name"
          },
          "city": {
            "type": "string",
            "description": ""
          },
          "country": {
            "type": "string",
            "description": ""
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime address was first created"
          },
          "line_1": {
            "type": [
              "string",
              "null"
            ],
            "description": "First line of street address"
          },
          "line_2": {
            "type": [
              "string",
              "null"
            ],
            "description": "Second line of street address"
          },
          "phone_number": {
            "type": [
              "string",
              "null"
            ],
            "description": "Telephone number. Specified for non-US addresses"
          },
          "postal_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "Postal or zip code"
          },
          "state": {
            "type": [
              "string",
              "null"
            ],
            "description": "State or province name"
          }
        }
      },
      "benefit": {
        "type": "object",
        "title": "Benefit",
        "description": "A benefit added to the campaign, which can be added to a tier to be delivered to the patron.",
        "externalDocs": {
          "description": "Official documentation for the Benefit resource",
          "url": "https://docs.patreon.com/#benefit"
        },
        "properties": {
          "app_external_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The third-party external ID this reward is associated with"
          },
          "app_meta": {
            "type": [
              "object",
              "null"
            ],
            "description": "Any metadata the third-party app included with this benefit on creation"
          },
          "benefit_type": {
            "type": [
              "string",
              "null"
            ],
            "description": "Type of benefit, such as `custom` for creator-defined benefits"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime this benefit was created"
          },
          "deliverables_due_today_count": {
            "type": "number",
            "description": "Number of deliverables for this benefit that are due today specifically"
          },
          "delivered_deliverables_count": {
            "type": "number",
            "description": "Number of deliverables for this benefit that have been marked complete"
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Display description"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "Whether this benefit has been deleted"
          },
          "is_ended": {
            "type": "boolean",
            "description": "Whether this benefit is no longer available to new patrons"
          },
          "is_published": {
            "type": "boolean",
            "description": "Whether this benefit is ready to be fulfilled to patrons"
          },
          "next_deliverable_due_date": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "The next due date (after EOD today) for this benefit"
          },
          "not_delivered_deliverables_count": {
            "type": "number",
            "description": "Number of deliverables for this benefit that are due, for all dates"
          },
          "rule_type": {
            "type": [
              "string",
              "null"
            ],
            "description": "A rule type designation, such as `eom_monthly` or `one_time_immediate`"
          },
          "tiers_count": {
            "type": "number",
            "description": "Number of tiers containing this benefit"
          },
          "title": {
            "type": "string",
            "description": "Display title"
          }
        }
      },
      "campaign": {
        "type": "object",
        "title": "Campaign",
        "description": "The creator's page, and the top-level object for accessing lists of members, tiers, etc",
        "externalDocs": {
          "description": "Official documentation for the Campaign resource",
          "url": "https://docs.patreon.com/#campaign-v2"
        },
        "properties": {
          "vanity": {
            "type": [
              "string",
              "null"
            ],
            "description": "The campaign's vanity name"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The url to visit this campaign"
          },
          "thanks_video_url": {
            "type": [
              "string",
              "null"
            ],
            "format": "uri",
            "description": "The URL of the video that is shown to patrons after pledging"
          },
          "thanks_msg": {
            "type": [
              "string",
              "null"
            ],
            "description": "The message that is shown to patrons after pledging"
          },
          "thanks_embed": {
            "type": [
              "string",
              "null"
            ],
            "description": "The embed that is shown to patrons after pledging"
          },
          "summary": {
            "type": [
              "string",
              "null"
            ],
            "description": "The summary of this campaign.\nCan be viewed in the About section of the campaign"
          },
          "show_earnings": {
            "type": "boolean",
            "description": "Whether the campaign's total earnings are shown publicly"
          },
          "rss_feed_title": {
            "type": [
              "string",
              "null"
            ],
            "description": "The title of the campaigns rss feed"
          },
          "rss_artwork_url": {
            "type": [
              "string",
              "null"
            ],
            "format": "uri",
            "description": "The url for the rss album artwork"
          },
          "published_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "Datetime that the creator most recently published (made publicly visible) the campaign.\nNull when the campaign has not been public."
          },
          "pledge_url": {
            "type": "string",
            "description": "Relative (to patreon.com) URL for the pledge checkout flow for this campaign"
          },
          "pay_per_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The thing which patrons are paying per, as in \"{@link Campaign.vanity} is making $1000 per {@link Campaign.pay_per_name}\""
          },
          "patron_count": {
            "type": "number",
            "description": "Number of patrons pledging to this creator"
          },
          "one_liner": {
            "type": [
              "string",
              "null"
            ],
            "description": "Pithy one-liner for this campaign, displayed on the creator page"
          },
          "main_video_url": {
            "type": [
              "string",
              "null"
            ],
            "format": "uri",
            "description": ""
          },
          "main_video_embed": {
            "type": [
              "string",
              "null"
            ],
            "description": ""
          },
          "is_nsfw": {
            "type": "boolean",
            "description": "Whether the creator has marked the campaign as containing nsfw content"
          },
          "is_monthly": {
            "type": "boolean",
            "description": "Whether the campaign charges per month"
          },
          "is_charged_immediately": {
            "type": "boolean",
            "description": "Whether the campaign charges upfront"
          },
          "image_url": {
            "type": "string",
            "format": "uri",
            "description": "Banner image URL for the campaign"
          },
          "image_small_url": {
            "type": "string",
            "format": "uri",
            "description": "Profile image URL for the campaign"
          },
          "has_sent_rss_notify": {
            "type": "boolean",
            "description": "Whether the creator has sent a one-time rss notification email"
          },
          "has_rss": {
            "type": "boolean",
            "description": "Whether this user has opted-in to rss feeds"
          },
          "google_analytics_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The ID of the Google Analytics tracker that the creator wants metrics to be sent to"
          },
          "discord_server_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The ID of the external discord server that is linked to this campaign"
          },
          "creation_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The type of content the creator is creating, as in \"{@link Campaign.vanity} is creating {@link Campaign.creation_name}\""
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime that the creator first began the campaign creation process"
          }
        }
      },
      "client": {
        "type": "object",
        "title": "OauthClient",
        "description": "A client created by a developer, used for getting OAuth2 access tokens.",
        "externalDocs": {
          "description": "Official documentation for the OauthClient resource",
          "url": "https://docs.patreon.com/#oauthclient"
        },
        "properties": {
          "author_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The author name provided during client setup."
          },
          "client_secret": {
            "type": "string",
            "description": "The client's secret."
          },
          "default_scopes": {
            "type": "string",
            "description": "The client's default OAuth scopes for the authorization flow."
          },
          "description": {
            "type": "string",
            "description": "The description provided during client setup."
          },
          "domain": {
            "type": [
              "string",
              "null"
            ],
            "format": "uri",
            "description": "The domain provided during client setup."
          },
          "icon_url": {
            "type": [
              "string",
              "null"
            ],
            "format": "uri",
            "description": "The URL of the icon used in the OAuth authorization flow."
          },
          "name": {
            "type": "string",
            "description": "The name provided during client setup."
          },
          "privacy_policy_url": {
            "type": [
              "string",
              "null"
            ],
            "format": "uri",
            "description": "The URL of the privacy policy provided during client setup."
          },
          "redirect_uris": {
            "type": "string",
            "description": "The allowable redirect URIs for the OAuth authorization flow."
          },
          "tos_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL of the terms of service provided during client setup."
          },
          "version": {
            "type": "number",
            "description": "The Patreon API version the client is targeting.",
            "examples": [
              2
            ]
          }
        }
      },
      "deliverable": {
        "type": "object",
        "title": "Deliverable",
        "description": "The record of whether or not a patron has been delivered the benefit they are owed because of their member tier.",
        "externalDocs": {
          "description": "Official documentation for the Deliverable resource",
          "url": "https://docs.patreon.com/#deliverable"
        },
        "properties": {
          "completed_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "When the creator marked the deliverable as completed or fulfilled to the patron"
          },
          "delivery_status": {
            "type": "string",
            "enum": [
              "delivered",
              "not_delivered",
              "wont_deliver"
            ],
            "description": ""
          },
          "due_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the deliverable is due to the patron"
          }
        }
      },
      "goal": {
        "type": "object",
        "title": "Goal",
        "description": "",
        "externalDocs": {
          "description": "Official documentation for the Goal resource",
          "url": "https://docs.patreon.com/#goal"
        },
        "properties": {}
      },
      "media": {
        "type": "object",
        "title": "Media",
        "description": "A file uploaded to patreon.com, usually an image.",
        "externalDocs": {
          "description": "Official documentation for the Media resource",
          "url": "https://docs.patreon.com/#media"
        },
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the file was created"
          },
          "download_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL to download this media. Valid for 24 hours."
          },
          "file_name": {
            "type": "string",
            "description": "File name."
          },
          "image_urls": {
            "type": "object",
            "description": "The resized image URLs for this media. Valid for 2 weeks."
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Metadata related to the file"
          },
          "mimetype": {
            "type": "string",
            "description": "Mimetype of uploaded file, eg: \"application/jpeg\""
          },
          "owner_id": {
            "type": "string",
            "description": "Ownership id (See also {@link Media.owner_type})"
          },
          "owner_relationship": {
            "type": "string",
            "description": "Ownership relationship type for multi-relationship medias"
          },
          "owner_type": {
            "type": "string",
            "description": "Type of the resource that owns the file"
          },
          "size_bytes": {
            "type": "number",
            "description": ""
          },
          "state": {
            "type": "string",
            "description": ""
          },
          "upload_expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the upload URL expires"
          },
          "upload_parameters": {
            "type": "object",
            "description": "All the parameters that have to be added to the upload form request"
          },
          "upload_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL to perform a POST request to in order to upload the media file"
          }
        }
      },
      "member": {
        "type": "object",
        "title": "Member",
        "description": "The record of a user's membership to a campaign.\nRemains consistent across months of pledging.",
        "externalDocs": {
          "description": "Official documentation for the Member resource",
          "url": "https://docs.patreon.com/#member"
        },
        "properties": {
          "campaign_lifetime_support_cents": {
            "type": "number",
            "description": "The total amount that the member has ever paid to the campaign in campaign's currency.\n0 if never paid"
          },
          "currently_entitled_amount_cents": {
            "type": "number",
            "description": "The amount in cents that the member is entitled to.\nThis includes a current pledge, or payment that covers the current payment period"
          },
          "email": {
            "type": "string",
            "description": "The member's email address.\nRequires the campaigns.members[email] scope"
          },
          "full_name": {
            "type": "string",
            "description": "Full name of the member user",
            "examples": [
              "John Doe"
            ]
          },
          "is_follower": {
            "type": "boolean",
            "description": "The user is not a pledging patron but has subscribed to updates about public posts"
          },
          "last_charge_date": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "Datetime of last attempted charge.\n`null` if never charged"
          },
          "last_charge_status": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "Paid",
              "Declined",
              "Deleted",
              "Pending",
              "Refunded",
              "Fraud",
              "Other"
            ],
            "description": "The result of the last attempted charge.\nThe only successful status is `'Paid'`.\n`null` if never charged\n\nNote: this will likely be either `'Paid'` or `'Pending'`"
          },
          "lifetime_support_cents": {
            "type": "number",
            "description": "The total amount that the member has ever paid to the campaign.\n0 if never paid"
          },
          "next_charge_date": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "Datetime of next charge.\n`null` if annual pledge downgrade"
          },
          "note": {
            "type": "string",
            "description": "The creator's notes on the member"
          },
          "patron_status": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "active_patron",
              "declined_patron",
              "former_patron"
            ],
            "description": "A `null` value indicates the member has never pledged"
          },
          "pledge_cadence": {
            "type": "number",
            "description": "Number of months between charges\n\nNote: this will be `1` if Campaign.is_monthly is `true`",
            "examples": [
              1
            ]
          },
          "pledge_relationship_start": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "Datetime of beginning of most recent pledge chainfrom this member to the campaign.\nPledge updates do not change this value"
          },
          "will_pay_amount_cents": {
            "type": "number",
            "description": "The amount in cents the user will pay at the next pay cycle",
            "examples": [
              500
            ]
          }
        }
      },
      "post": {
        "type": "object",
        "title": "Post",
        "description": "Content posted by a creator on a campaign page.",
        "externalDocs": {
          "description": "Official documentation for the Post resource",
          "url": "https://docs.patreon.com/#post-v2"
        },
        "properties": {
          "app_id": {
            "type": [
              "number",
              "null"
            ],
            "description": "Platform app id"
          },
          "app_status": {
            "type": [
              "string",
              "null"
            ],
            "description": "Processing status of the post"
          },
          "content": {
            "type": [
              "string",
              "null"
            ],
            "description": ""
          },
          "embed_data": {
            "type": [
              "object",
              "null"
            ],
            "description": "An object containing embed data if media is embedded in the post"
          },
          "embed_url": {
            "type": [
              "string",
              "null"
            ],
            "format": "uri",
            "description": "Embed media url"
          },
          "is_paid": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Whether the post incurs a bill as part of a pay-per-post campaign"
          },
          "is_public": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "- `true` if the post is viewable by anyone\n- `false` if only patrons (or a subset of patrons) can view"
          },
          "published_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "Datetime that the creator most recently published (made publicly visible) the post"
          },
          "tiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The tier ids that allow the patrons from those tiers to view the post.\nEmpty array if no tiers assigned even if {@link Post.is_paid} is true"
          },
          "title": {
            "type": [
              "string",
              "null"
            ],
            "description": ""
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "A URL to access this post on patreon.com"
          }
        }
      },
      "pledge-event": {
        "type": "object",
        "title": "PledgeEvent",
        "description": "The record of a pledging action taken by the user, or that action's failure.",
        "externalDocs": {
          "description": "Official documentation for the PledgeEvent resource",
          "url": "https://docs.patreon.com/#pledge-event"
        },
        "properties": {
          "amount_cents": {
            "type": "number",
            "description": "Amount (in the currency in which the patron paid) of the underlying event",
            "examples": [
              500
            ]
          },
          "currency_code": {
            "type": "string",
            "description": "ISO code of the currency of the event"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "The date which this event occurred"
          },
          "payment_status": {
            "type": "string",
            "enum": [
              "Paid",
              "Declined",
              "Pending",
              "Refunded",
              "Fraud",
              "Other"
            ],
            "description": "Status of underlying payment"
          },
          "tier_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Id of the tier associated with the pledge"
          },
          "tier_title": {
            "type": [
              "string",
              "null"
            ],
            "description": "Title of the reward tier associated with the pledge"
          },
          "type": {
            "type": "string",
            "enum": [
              "pledge_start",
              "pledge_upgrade",
              "pledge_downgrade",
              "pledge_delete",
              "subscription"
            ],
            "description": "Event type."
          }
        }
      },
      "tier": {
        "type": "object",
        "title": "Tier",
        "description": "A membership level on a campaign, which can have benefits attached to it.",
        "externalDocs": {
          "description": "Official documentation for the Tier resource",
          "url": "https://docs.patreon.com/#tier"
        },
        "properties": {
          "amount_cents": {
            "type": "number",
            "description": "Monetary amount associated with this tier (in U.S. cents)"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime this tier was created"
          },
          "description": {
            "type": "string",
            "description": "Tier display description"
          },
          "discord_role_ids": {
            "type": [
              "object",
              "null"
            ],
            "description": "The discord role IDs granted by this tier"
          },
          "edited_at": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime tier was last modified"
          },
          "image_url": {
            "type": [
              "string",
              "null"
            ],
            "format": "uri",
            "description": "Full qualified image URL associated with this tier"
          },
          "patron_count": {
            "type": "number",
            "description": "Number of patrons currently registered for this tier"
          },
          "post_count": {
            "type": "number",
            "description": "Number of posts published to this tier"
          },
          "published": {
            "type": "boolean",
            "description": "Whether the tier is currently published"
          },
          "published_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "Datetime this tier was last published"
          },
          "remaining": {
            "type": [
              "number",
              "null"
            ],
            "description": "Remaining number of patrons who may subscribe, if there is a {@link Tier.user_limit}"
          },
          "requires_shipping": {
            "type": "boolean",
            "description": "Whether this tier requires a shipping address from patrons"
          },
          "title": {
            "type": "string",
            "description": "Tier display title"
          },
          "unpublished_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "Datetime tier was unpublished, while applicable"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "Fully qualified URL associated with this tier"
          },
          "user_limit": {
            "type": [
              "number",
              "null"
            ],
            "description": "Maximum number of patrons this tier is limited to, if applicable"
          }
        }
      },
      "user": {
        "type": "object",
        "title": "User",
        "description": "The Patreon user, which can be both patron and creator.",
        "externalDocs": {
          "description": "Official documentation for the User resource",
          "url": "https://docs.patreon.com/#user-v2"
        },
        "properties": {
          "about": {
            "type": [
              "string",
              "null"
            ],
            "description": "The user's about text, which appears on their profile"
          },
          "can_see_nsfw": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Whether this user can view nsfw content"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime of this user's account creation"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The user's email address.\nRequires certain scopes to access.\nSee the scopes section of the documentation"
          },
          "first_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "First name."
          },
          "full_name": {
            "type": "string",
            "description": "Combined first and last name"
          },
          "hide_pledges": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Whether the user has chosen to keep private which creators they pledge to"
          },
          "image_url": {
            "type": "string",
            "format": "uri",
            "description": "The user's profile picture URL, scaled to width 400px"
          },
          "is_email_verified": {
            "type": "boolean",
            "description": "Whether the user has confirmed their email"
          },
          "last_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Last name."
          },
          "like_count": {
            "type": "number",
            "description": "How many posts this user has liked"
          },
          "social_connections": {
            "type": "object",
            "description": "Mapping from user's connected app names to external user id on the respective app\n\nNOTE: since the documentation is `object`, this can change without notice.\nFor a more accurate representation use the following type using TypeScript module augmentation:\n```ts\nimport 'patreon-api.ts'\n\ndeclare module 'patreon-api.ts' {\n   interface CustomTypeOptions {\n       social_connections: Record<string, { url: string, user_id: string } | null>\n   }\n}\n```"
          },
          "thumb_url": {
            "type": "string",
            "format": "uri",
            "description": "The user's profile picture URL, scaled to a square of size 100x100px"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL of this user's creator or patron profile"
          },
          "vanity": {
            "type": [
              "string",
              "null"
            ],
            "description": "The public \"username\" of the user.\npatreon.com/ goes to this user's creator page.\nNon-creator users might not have a vanity."
          }
        }
      },
      "webhook": {
        "type": "object",
        "title": "Webhook",
        "description": "Webhooks are fired based on events happening on a particular campaign.",
        "externalDocs": {
          "description": "Official documentation for the Webhook resource",
          "url": "https://docs.patreon.com/#webhook"
        },
        "properties": {
          "last_attempted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last date that the webhook was attempted or used."
          },
          "num_consecutive_times_failed": {
            "type": "number",
            "description": "Number of times the webhook has failed consecutively, when in an error state.",
            "examples": [
              0,
              2
            ]
          },
          "paused": {
            "type": "boolean",
            "description": "`true` if the webhook is paused as a result of repeated failed attempts to post to uri.\nSet to `false` to attempt to re-enable a previously failing webhook."
          },
          "secret": {
            "type": "string",
            "description": "Secret used to sign your webhook message body, so you can validate authenticity upon receipt."
          },
          "triggers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of events that will trigger this webhook."
          },
          "uri": {
            "type": "string",
            "format": "uri",
            "description": "Fully qualified uri where webhook will be sent",
            "examples": [
              "'https://www.example.com/webhooks/incoming'"
            ]
          }
        }
      },
      "webhookTrigger": {
        "type": "array",
        "title": "Webhook trigger",
        "items": {
          "type": "string",
          "enum": [
            "members:create",
            "members:update",
            "members:delete",
            "members:pledge:create",
            "members:pledge:update",
            "members:pledge:delete",
            "posts:publish",
            "posts:update",
            "posts:delete"
          ]
        },
        "externalDocs": {
          "url": "https://docs.patreon.com/#triggers-v2"
        },
        "examples": [
          [
            "members:pledge:create",
            "members:update",
            "members:pledge:delete"
          ]
        ]
      },
      "APIError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number"
          },
          "code_name": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      }
    }
  },
  "paths": {
    "/api/oauth/v2/identity": {
      "summary": "",
      "description": "",
      "get": {
        "tags": [
          "Resources"
        ],
        "operationId": "getIdentity",
        "description": "",
        "summary": "Get identity",
        "deprecated": false,
        "externalDocs": {
          "description": "Official documentation",
          "url": "https://docs.patreon.com/#get-api-oauth2-v2-identity"
        },
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "campaign",
                  "memberships"
                ]
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "properties": {
                "campaign": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/campaign"
                  }
                },
                "member": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/member"
                  }
                },
                "user": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          },
          {
            "$ref": "#/components/parameters/userAgent"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/userResponse"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "410": {
            "$ref": "#/components/responses/410"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/api/oauth/v2/campaigns/{campaign_id}": {
      "summary": "",
      "description": "",
      "get": {
        "tags": [
          "Resources"
        ],
        "operationId": "getCampaign",
        "description": "",
        "summary": "Get campaign",
        "deprecated": false,
        "externalDocs": {
          "description": "Official documentation",
          "url": "https://docs.patreon.com/#get-api-oauth2-v2-campaigns-campaign_id"
        },
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "benefits",
                  "creator",
                  "goals",
                  "tiers"
                ]
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "properties": {
                "benefit": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/benefit"
                  }
                },
                "user": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/user"
                  }
                },
                "goal": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/goal"
                  }
                },
                "tier": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/tier"
                  }
                },
                "campaign": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/campaign"
                  }
                }
              }
            }
          },
          {
            "$ref": "#/components/parameters/campaign_id"
          },
          {
            "$ref": "#/components/parameters/userAgent"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/campaignResponse"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "410": {
            "$ref": "#/components/responses/410"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "auth": [
              "campaigns"
            ]
          }
        ]
      }
    },
    "/api/oauth/v2/campaigns": {
      "summary": "",
      "description": "",
      "get": {
        "tags": [
          "Resources"
        ],
        "operationId": "getCampaigns",
        "description": "",
        "summary": "Get campaigns",
        "deprecated": false,
        "externalDocs": {
          "description": "Official documentation",
          "url": "https://docs.patreon.com/#get-api-oauth2-v2-campaigns"
        },
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "benefits",
                  "creator",
                  "goals",
                  "tiers"
                ]
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "properties": {
                "benefit": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/benefit"
                  }
                },
                "user": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/user"
                  }
                },
                "goal": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/goal"
                  }
                },
                "tier": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/tier"
                  }
                },
                "campaign": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/campaign"
                  }
                }
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string"
                },
                "count": {
                  "type": "number"
                }
              }
            }
          },
          {
            "$ref": "#/components/parameters/userAgent"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/campaignsResponse"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "410": {
            "$ref": "#/components/responses/410"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "auth": [
              "campaigns"
            ]
          }
        ]
      }
    },
    "/api/oauth/v2/campaigns/{campaign_id}/members": {
      "summary": "",
      "description": "",
      "get": {
        "tags": [
          "Resources"
        ],
        "operationId": "getCampaignMembers",
        "description": "",
        "summary": "Get campaign members",
        "deprecated": false,
        "externalDocs": {
          "description": "Official documentation",
          "url": "https://docs.patreon.com/#get-api-oauth2-v2-campaigns-campaign_id-members"
        },
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "address",
                  "campaign",
                  "currently_entitled_tiers",
                  "pledge_history",
                  "user"
                ]
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/address"
                  }
                },
                "campaign": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/campaign"
                  }
                },
                "tier": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/tier"
                  }
                },
                "pledge-event": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/pledge-event"
                  }
                },
                "user": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/user"
                  }
                },
                "member": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/member"
                  }
                }
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string"
                },
                "count": {
                  "type": "number"
                }
              }
            }
          },
          {
            "$ref": "#/components/parameters/campaign_id"
          },
          {
            "$ref": "#/components/parameters/userAgent"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/membersResponse"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "410": {
            "$ref": "#/components/responses/410"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "auth": [
              "campaigns.members"
            ]
          }
        ]
      }
    },
    "/api/oauth/v2/members/{id}": {
      "summary": "",
      "description": "",
      "get": {
        "tags": [
          "Resources"
        ],
        "operationId": "getMember",
        "description": "",
        "summary": "Get member",
        "deprecated": false,
        "externalDocs": {
          "description": "Official documentation",
          "url": "https://docs.patreon.com/#get-api-oauth2-v2-members-id"
        },
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "address",
                  "campaign",
                  "currently_entitled_tiers",
                  "pledge_history",
                  "user"
                ]
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/address"
                  }
                },
                "campaign": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/campaign"
                  }
                },
                "tier": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/tier"
                  }
                },
                "pledge-event": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/pledge-event"
                  }
                },
                "user": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/user"
                  }
                },
                "member": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/member"
                  }
                }
              }
            }
          },
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/userAgent"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/memberResponse"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "410": {
            "$ref": "#/components/responses/410"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "auth": [
              "campaigns.members"
            ]
          }
        ]
      }
    },
    "/api/oauth/v2/campaigns/{campaign_id}/posts": {
      "summary": "",
      "description": "",
      "get": {
        "tags": [
          "Resources"
        ],
        "operationId": "getCampaignPosts",
        "description": "",
        "summary": "Get campaign posts",
        "deprecated": false,
        "externalDocs": {
          "description": "Official documentation",
          "url": "https://docs.patreon.com/#get-api-oauth2-v2-campaigns-campaign_id-posts"
        },
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "user",
                  "campaign"
                ]
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/user"
                  }
                },
                "campaign": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/campaign"
                  }
                },
                "post": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/post"
                  }
                }
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string"
                },
                "count": {
                  "type": "number"
                }
              }
            }
          },
          {
            "$ref": "#/components/parameters/campaign_id"
          },
          {
            "$ref": "#/components/parameters/userAgent"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/postsResponse"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "410": {
            "$ref": "#/components/responses/410"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "auth": [
              "campaigns.posts"
            ]
          }
        ]
      }
    },
    "/api/oauth/v2/posts/{id}": {
      "summary": "",
      "description": "",
      "get": {
        "tags": [
          "Resources"
        ],
        "operationId": "getPost",
        "description": "",
        "summary": "Get post",
        "deprecated": false,
        "externalDocs": {
          "description": "Official documentation",
          "url": "https://docs.patreon.com/#get-api-oauth2-v2-posts-id"
        },
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "user",
                  "campaign"
                ]
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/user"
                  }
                },
                "campaign": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/campaign"
                  }
                },
                "post": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/post"
                  }
                }
              }
            }
          },
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/userAgent"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/postResponse"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "410": {
            "$ref": "#/components/responses/410"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "auth": [
              "campaigns.posts"
            ]
          }
        ]
      }
    },
    "/api/oauth/v2/webhooks/{id}": {
      "summary": "",
      "description": "",
      "patch": {
        "tags": [
          "Webhooks"
        ],
        "operationId": "editWebhook",
        "description": "",
        "summary": "Edit webhook",
        "deprecated": false,
        "externalDocs": {
          "description": "Official documentation",
          "url": "https://docs.patreon.com/#patch-api-oauth2-v2-webhooks-id"
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "required": [
                      "attributes",
                      "type",
                      "id"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "webhook"
                        ]
                      },
                      "id": {
                        "type": "string",
                        "examples": [
                          "webhook-id"
                        ]
                      },
                      "attributes": {
                        "required": [],
                        "properties": {
                          "triggers": {
                            "$ref": "#/components/schemas/webhookTrigger"
                          },
                          "uri": {
                            "type": "string",
                            "description": "Fully qualified uri where webhook will be sent",
                            "examples": [
                              "https://www.example.com/webhooks/incoming"
                            ]
                          },
                          "paused": {
                            "type": "boolean",
                            "examples": [
                              false
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/userAgent"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/webhookResponse"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "410": {
            "$ref": "#/components/responses/410"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "auth": [
              "w:campaigns.webhook"
            ]
          }
        ]
      }
    },
    "/api/oauth/v2/webhooks": {
      "summary": "",
      "description": "",
      "get": {
        "tags": [
          "Webhooks"
        ],
        "operationId": "getWebhooks",
        "description": "",
        "summary": "Get webhooks",
        "deprecated": false,
        "externalDocs": {
          "description": "Official documentation",
          "url": "https://docs.patreon.com/#get-api-oauth2-v2-webhooks"
        },
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "campaign",
                  "client"
                ]
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "properties": {
                "campaign": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/campaign"
                  }
                },
                "client": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/client"
                  }
                },
                "webhook": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/webhook"
                  }
                }
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "properties": {
                "cursor": {
                  "type": "string"
                },
                "count": {
                  "type": "number"
                }
              }
            }
          },
          {
            "$ref": "#/components/parameters/userAgent"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/webhooksResponse"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "410": {
            "$ref": "#/components/responses/410"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "auth": [
              "w:campaigns.webhook"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "operationId": "createWebhook",
        "description": "",
        "summary": "Create webhook",
        "deprecated": false,
        "externalDocs": {
          "description": "Official documentation",
          "url": "https://docs.patreon.com/#post-api-oauth2-v2-webhooks"
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "required": [
                      "type",
                      "attributes",
                      "relationships"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "webhook"
                        ]
                      },
                      "attributes": {
                        "required": [
                          "triggers",
                          "uri"
                        ],
                        "properties": {
                          "triggers": {
                            "$ref": "#/components/schemas/webhookTrigger"
                          },
                          "uri": {
                            "type": "string",
                            "description": "Fully qualified uri where webhook will be sent",
                            "examples": [
                              "https://www.example.com/webhooks/incoming"
                            ]
                          }
                        }
                      },
                      "relationships": {
                        "properties": {
                          "campaign": {
                            "properties": {
                              "data": {
                                "required": [
                                  "type",
                                  "id"
                                ],
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "campaign"
                                    ]
                                  },
                                  "id": {
                                    "type": "string",
                                    "examples": [
                                      "campaign-id"
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/userAgent"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/webhooksResponse"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "410": {
            "$ref": "#/components/responses/410"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "auth": [
              "w:campaigns.webhook"
            ]
          }
        ]
      }
    }
  }
}